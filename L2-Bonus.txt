;L2-P12 Determine the list of nodes accesed in preorder in a tree of type (2).
(defun preorder_traversal (tree)
    (cond
        ((null tree) nil)
        (t (append (append (list (car tree)) (preorder_traversal (cadr tree)) (preorder_traversal (caddr tree)))
        ))
    )
)

;L2-P4 Convert a tree of type (2) to type (1).
(defun conversion (tree)
     (cond
         ((null tree) nil)
         ((= (length tree) 3) (append (list (car tree)) (list 2) (conversion (cadr tree))(conversion (caddr tree))))
         ((= (length tree) 2) (append (list (car tree)) (list 1) (conversion (cdr tree))))
         ((= (length tree) 1) (append (list (car tree)) (list 0)))
     )
)

;L2-P3 Return the number of levels of a tree of type (1)
(defun left_tree(tree m n)
   (cond
      ((null tree) nil)
      ((= m (+ 1 n)) nil)
      (t (append (list (car tree)) (list (cadr tree)) (left_tree (cddr tree) (+ m 1) (+ n (cadr tree))))
      )
   )
) 

(defun right_tree(tree m n)
   (cond
     ((null tree) nil)
     ((= m (+ 1 n)) tree)
     (t (right_tree (cddr tree) (+ m 1) 
        (+ n (cadr tree)))
     )
   )
)

(defun levels(tree)
   (cond
     ((null tree) 0)
     ((= (cadr tree) '0) 1)
     (t (+ 1 (max (levels (left_tree (cddr tree) 0 0))
                  (levels (right_tree (cddr tree) 0 0))))
     )
   )
)